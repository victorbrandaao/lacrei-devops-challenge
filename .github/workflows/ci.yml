name: CI - Tests and Security Scan

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || echo "‚ö†Ô∏è Linter not configured"

      - name: Run unit tests
        run: npm test -- --coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          fail_ci_if_error: false

  docker-security:
    name: Docker Build and Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: lacrei-api:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: lacrei-api:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Validate container health
        run: |
          echo "üöÄ Starting container..."
          docker run -d -p 3000:3000 --name test-container lacrei-api:${{ github.sha }}

          echo "‚è≥ Waiting for container to be ready..."
          sleep 15

          echo "üîç Testing health endpoint..."
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/status)

          if [ "$response" != "200" ]; then
            echo "‚ùå Health check failed with status $response"
            docker logs test-container
            exit 1
          fi

          echo "‚úÖ Container health check passed!"

          # Validate JSON response
          json=$(curl -s http://localhost:3000/status)
          echo "Response: $json"

          docker stop test-container
          docker rm test-container
